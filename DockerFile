# Temel .NET imajlarını kullanarak uygulama için ortam kuruyoruz
FROM mcr.microsoft.com/dotnet/aspnet:7.0 AS base
WORKDIR /app
EXPOSE 80
EXPOSE 443

# Build aşaması - SDK kullanıyoruz
# Güncel projenizde bulunan Class Libraryleri buraya ekleyebilirsiniz veya bulunmayanları çıkartabilirsiniz
#Bu DockerFile'ı proje dizininize ekleyerek> docker build -t webapi . komutu ile imaji alabilirsiniz. 
#Daha sonra csharpwithmssql.yaml dosyası dizininde docker-compose up csharpwithmssql.yaml komutu ile network ü oluşturup localhost:5000/swagger/index.html adresinde Swagger arayüzüne giriş yapabilirsiniz.

FROM mcr.microsoft.com/dotnet/sdk:7.0 AS build
WORKDIR /src
COPY ["WebAPI/WebAPI.csproj", "WebAPI/"]
COPY ["Business/Business.csproj", "Business/"]
COPY ["DataAccess/DataAccess.csproj", "DataAccess/"]
COPY ["Core/Core.csproj", "Core/"]
COPY ["Entities/Entities.csproj", "Entities/"]
RUN dotnet restore "WebAPI/WebAPI.csproj"
COPY . . 
WORKDIR "/src/WebAPI"
RUN dotnet build "WebAPI.csproj" -c Release -o /app/build

RUN dotnet tool restore

FROM build AS publish
RUN dotnet publish "WebAPI.csproj" -c Release -o /app/publish

# Final aşama - Runtime imajı kullanıyoruz, sadece uygulama çalıştıracak
FROM mcr.microsoft.com/dotnet/aspnet:7.0 AS final
WORKDIR /app
COPY --from=publish /app/publish .

# Uygulamayı başlatıyoruz
CMD ["dotnet", "WebAPI.dll"]
